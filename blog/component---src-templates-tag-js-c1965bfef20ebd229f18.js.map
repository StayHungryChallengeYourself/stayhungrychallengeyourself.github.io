{"version":3,"file":"component---src-templates-tag-js-c1965bfef20ebd229f18.js","mappings":"2JAOA,MAqBMA,EAA4CC,IAAAA,IAAC,IAAEC,EAAG,MAAEC,EAAK,gBAAEC,GAAiB,SAChFC,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAIL,GACRG,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,UAAUC,OAvBTC,EAuB2BP,EAvBNQ,EAuBaP,EAvBA,CACpDA,gBAAgB,IAAKO,EACrBC,gBAAgB,SAASC,EAAAA,EAAAA,IAAWH,EAAa,SAAQ,SAFxC,IAACA,EAAqBC,CAwBhC,EAyCT,IAtCsCG,IAAAA,IAAC,MACrCC,EAAK,KACLC,EAAO,GAAE,IACTd,EAAG,YACHQ,EAAc,GAAE,sBAChBO,EAAwB,GAAE,YAC1BC,EAAW,KACXC,EAAO,IACR,SACCd,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,kBACbH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,eACZE,GACCL,EAAAA,cAACL,EAAU,CACTE,IAAKA,EACLC,MAAOO,EACPN,gBAAiBa,IAGrBZ,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,QACbH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,WACbH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,SACbH,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,QAAQQ,EAAKI,MAAM,KAAK,IACvCD,EAAKE,KAAKC,GACTjB,EAAAA,cAACkB,EAAAA,EAAG,CAACD,KAAMA,EAAME,IAAKF,OAG1BjB,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAE,IAAML,GACZG,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,SAASO,IAEzBV,EAAAA,cAAAA,IAAAA,KAAIa,GACJb,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAE,IAAML,GAAO,iBAMvB,C,yDCoBR,IA3BiCY,IAAAA,IAAC,IAChCZ,EAAG,MAAEa,EAAQU,EAAAA,QAAOV,MAAK,YAAEG,EAAW,MAAEf,EAAK,aAAEuB,EAAY,OAAEC,GAC9D,SACCtB,EAAAA,cAACuB,EAAAA,EAAM,KACLvB,EAAAA,cAAAA,QAAAA,KAAQU,GAERV,EAAAA,cAAAA,OAAAA,CAAMiB,KAAK,cAAcO,QAASX,IAClCb,EAAAA,cAAAA,OAAAA,CAAMiB,KAAK,QAAQO,QAAS1B,IAG5BE,EAAAA,cAAAA,SAAAA,CAAQyB,KAAK,uBACVC,KAAKC,UArEY/B,KAAAA,IAAC,IACvBC,EAAG,MACHa,EAAK,aACLW,EAAY,OACZC,EAAM,MACNxB,EAAK,YACLe,GACU,QAAK,CACf,CACE,WAAY,oBACZ,QAAS,UACThB,MACAoB,KAAMP,EACNkB,cAAeP,GAAgB,IAEjCC,EACI,CACA,WAAY,oBACZ,QAAS,iBACTO,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,CACJ,MAAOlC,EACPoB,KAAMP,EACNZ,YAKN,GACJwB,EACI,CACA,WAAY,oBACZ,QAAS,cACTzB,MACAoB,KAAMP,EACNkB,cAAeP,GAAgB,GAC/BW,SAAUtB,EACVZ,MAAO,CACL,QAAS,cACTD,IAAKC,GAEPe,eAEA,GACL,EAsBqBoB,CAAgB,CAACpC,MAAKa,QAAOW,eAAcC,SAAQxB,QAAOe,kBAI5Eb,EAAAA,cAAAA,OAAAA,CAAMkC,SAAS,SAASV,QAAS3B,IAChCyB,EACCtB,EAAAA,cAAAA,OAAAA,CAAMkC,SAAS,UAAUV,QAAQ,YAEjCxB,EAAAA,cAAAA,OAAAA,CAAMkC,SAAS,UAAUV,QAAQ,YAEnCxB,EAAAA,cAAAA,OAAAA,CAAMkC,SAAS,WAAWV,QAASd,IACnCV,EAAAA,cAAAA,OAAAA,CAAMkC,SAAS,iBAAiBV,QAASX,IACzCb,EAAAA,cAAAA,OAAAA,CAAMkC,SAAS,WAAWV,QAAS1B,IAC5B,C,6GC/EX,MAAM,QAAEqC,EAAU,IAAOf,EAAAA,QAgBzB,MAde,IACbpB,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,UACbH,EAAAA,cAAAA,IAAAA,KAAG,QACFmC,EAAQnB,KAAIoB,GACXpC,EAAAA,cAACqC,EAAAA,EAAY,CACXC,KAAMF,aAAM,EAANA,EAAQE,KACd5B,MAAO0B,aAAM,EAANA,EAAQ1B,MACfS,IAAKiB,aAAM,EAANA,EAAQ1B,MACb6B,IAAI,gBCUZ,MApBmB3C,IAAqB,IAApB,MAAE4C,EAAQ,IAAI,EAEhC,OACExC,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,eACbH,EAAAA,cAAAA,IAAAA,KAAG,QACFwC,EAAMxB,KAAIP,IAAe,IAAD,MAAb,KAAEgC,GAAM,EAClB,MAAMC,EAAK,MAAOD,SAAiB,QAAb,EAAJA,EAAME,mBAAW,WAAb,EAAJC,EAAmB/C,MAAO4C,EAAKE,YAAYE,MAAQJ,EAAKK,OAAOD,MACjF,OACE7C,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAIwC,EACJvB,IAAKuB,GAEJD,EAAKE,YAAYjC,MACb,IAGN,ECGX,MAfyCd,IAAAA,IAAC,WAAEmD,EAAU,MAAEP,EAAQ,IAAG,SACjExC,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,sCACbH,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,IAAAA,KAAG,KAEA+C,EAAW,QAGd/C,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAACgD,EAAU,CAACR,MAAOA,IACnBxC,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAACiD,EAAM,MACH,ECbR,MAAM,OACJC,EACAjC,KAAI,QACJkC,EAAK,QACLC,EAAO,MACPC,GACEjC,EAAAA,QAYEkC,EAAgC1D,IAAAA,IAAC,KAAE0C,EAAI,KAAEiB,GAAM,SACnDvD,EAAAA,cAAAA,IAAAA,CACEwD,OAAO,SACPlB,KAAMA,EACNC,IAAI,wCACJpC,UAAU,eAEVH,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,yBACdH,EAAAA,cAACyD,EAAAA,EAAe,CAACF,KAAMA,KAEvB,EAGAG,EAAuCjD,IAAAA,IAAC,WAAEsC,EAAa,EAAC,YAAEY,EAAc,IAAI,SAChF3D,EAAAA,cAAAA,SAAAA,CAAQG,UAAU,gFAChBH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,YACbH,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAImD,EAAOlD,UAAU,QACzBH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,SAASyD,IAAKR,EAASS,IAAI,UAC1C7D,EAAAA,cAAAA,KAAAA,KAAKiB,IAEPjB,EAAAA,cAACsD,EAAI,CACHhB,KAAMY,EAAOrD,IACb0D,KAAM,CAAC,MAAO,YAEhBvD,EAAAA,cAACsD,EAAI,CAAChB,KAAI,UAAYa,EAASI,KAAM,CAAC,MAAO,cAC7CvD,EAAAA,cAAC8D,EAAW,CAACf,WAAYA,EAAYP,MAAOmB,KAEvC,EAGX,UACE3D,EAAAA,cAAC+D,EAAAA,YAAW,CACVC,MAAK,aAgCLC,OAAQC,GAAQlE,EAAAA,cAAC0D,EAAO,iBAAKQ,EAAKC,IAASD,EAAKE,W,+CC9EpD,IARwCxE,IAAAA,IAAC,KAAEqB,EAAI,MAAEoD,EAAQ,IAAI,SAC3DrE,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAE,QAAUe,EAAQd,UAAU,cACjCc,EAAK,IAELoD,EACI,C,wDCNT,MAEMC,EAAU,CACd,eAAgB,IAChB,aAAc,IACdC,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,KAAM,KAGFlE,EAAa,SAACmE,EAAkBC,GACpC,QAD8D,IAA1BA,IAAAA,EAA6B,UAC5DD,EACH,MAAM,kCAKR,GAAIA,EAASE,MAAM,eAEjB,OAAIF,EAASE,MAAM,QACVF,EAEH,uBAAwBA,EAGhC,MAAMG,EAAeH,EAASI,QAAQ,aAAa,KAAMT,EAAQM,GAAK,OAEtE,OAAIE,EAAaD,MAAM,QACdC,EAEH,uBAAwBA,CAChC,C,0ECaA,UA7CgB,IAA4B,IAA3B,KAAEZ,EAAI,YAAEc,GAAa,EACpC,MAAM,MAAEC,GAAUf,EAAKgB,mBACjB,IAAEC,GAAQH,EAChB,OACE,uBAAK7E,UAAU,aACb,uBACEA,UAAU,MACVC,MAAO,CACLgF,OAAQ,KAGV,gBAAC,IAAO,MAER,uBAAKjF,UAAU,kDACb,uBACEA,UAAU,SACVC,MAAO,CACLiF,SAAU,GACVD,OAAQ,KAGTH,EAAMK,OAAO,gBAEbH,GAEFF,EAAMjE,KAAI,QAAC,KAAEyB,GAAM,SAClB,gBAAC,IAAI,iBAAKA,EAAKE,YAAW,CAAExB,IAAKsB,EAAK8C,KAAM,KAIhD,uBAAKpF,UAAU,+BAGjB,gBAAC,IAAG,CACFO,MAAOyE,EACPtF,IAAG,QAAUsF,EACb9D,aAAa,eACbC,QAAQ,EACRT,YAAasE,EACbrF,MAAM,oCAEJ,C","sources":["webpack://my-thoughts/./src/components/Card/index.tsx","webpack://my-thoughts/./src/components/SEO/index.tsx","webpack://my-thoughts/./src/components/Sidebar/Friend/index.tsx","webpack://my-thoughts/./src/components/Sidebar/LatestPost/index.tsx","webpack://my-thoughts/./src/components/Sidebar/Information/index.tsx","webpack://my-thoughts/./src/components/Sidebar/index.tsx","webpack://my-thoughts/./src/components/Tag/index.tsx","webpack://my-thoughts/./src/utils/image.ts","webpack://my-thoughts/./src/templates/tag.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport Tag from '../Tag';\nimport { parseImgur } from '../../utils/image';\nimport './index.scss';\n\nconst imageStyle = (headerImage: string, color: string) => ({\n  backgroundColor: `#${color}`,\n  backgroundImage: ` url(${parseImgur(headerImage, 'large')})`,\n});\n\ntype CardPropTypes = {\n  title: string,\n  date: string,\n  url: string,\n  headerImage: string,\n  headerBackgroundColor: string,\n  description: string,\n  tags: string[],\n};\n\ntype CardHeaderPropTypes = {\n  image: string,\n  url: string,\n  backgroundColor: string,\n};\n\nconst CardHeader: React.FC<CardHeaderPropTypes> = ({ url, image, backgroundColor }) => (\n  <Link to={url}>\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\n  </Link>\n);\n\nconst Card: React.FC<CardPropTypes> = ({\n  title,\n  date = '',\n  url,\n  headerImage = '',\n  headerBackgroundColor = '',\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map((name) => (\n              <Tag name={name} key={name} />\n            ))}\n          </div>\n          <Link to={`/${url}`}>\n            <h4 className=\"title\">{title}</h4>\n          </Link>\n          <p>{description}</p>\n          <Link to={`/${url}`}>\n            ....继续阅读全文\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\nexport default Card;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport config from '../../../configs';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}: PropTypes) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\ntype PropTypes = {\n  url: string,\n  title: string,\n  description: string,\n  image: string,\n  siteTitleAlt: string,\n  isPost: string,\n};\n\nconst SEO: React.FC<PropTypes> = ({\n  url, title = config.title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD({url, title, siteTitleAlt, isPost, image, description}))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n  </Helmet>\n)\n\nexport default SEO;\n","import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport config from '../../../../configs';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"friend\">\n    <p>友情链接</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend?.href}\n        title={friend?.title}\n        key={friend?.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './index.scss';\n\ntype PropTypes = {\n  posts: Record<any, any>[],\n};\nconst LatestPost = ({ posts = [] }) => {\n\n  return (\n    <div className=\"latest-post\">\n      <p>最新文章</p>\n      {posts.map(({ node }) => {\n        const toUrl = `/${node?.frontmatter?.url || node.frontmatter.slug || node.fields.slug}`;\n        return (\n          <Link\n            to={toUrl}\n            key={toUrl}\n          >\n            {node.frontmatter.title}\n          </Link>\n        )\n      })}\n    </div >\n  )\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\ntype PropTypes = {\n  totalCount: number\n  posts: [],\n};\n\n// eslint-disable-next-line react/prop-types\nconst Information: React.FC<PropTypes> = ({ totalCount, posts = []}) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      共&nbsp;\n      {totalCount}\n      &nbsp;篇文章\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Friend />\n  </div>\n);\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\nimport config from '../../../configs';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  github,\n  name,\n  email,\n  iconUrl,\n  about,\n} = config;\n\ntype IconPropTypes = {\n  href: string,\n  icon: IconProp,\n};\n\ntype SidebarPropTypes = {\n  totalCount: number,\n  latestPosts: [],\n};\n\nconst Icon: React.FC<IconPropTypes> = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar : React.FC<SidebarPropTypes> = ({ totalCount = 0, latestPosts = [] }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"Calpa\" />\n        <h4>{name}</h4>\n      </Link>\n      <Icon\n        href={github.url}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { frontmatter: { date: DESC } }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import { Link } from 'gatsby';\nimport React from 'react';\n\ninterface PropTypes {\n  name: string,\n  count?: string,\n}\nexport const Tag: React.FC<PropTypes> = ({ name, count = '' }) => (\n  <Link to={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </Link>\n);\n\nexport default Tag;\n","// s = Small Square (90×90)\n// b = Big Square (160×160)\n// t = Small Thumbnail (160×160)\n// m = Medium Thumbnail (320×320)\n// l = Large Thumbnail (640×640)\n// h = Huge Thumbnail (1024×1024)\nconst defaultPicture = 'M795H8A.jpg';\n\nconst mapping = {\n  'small-square': 's',\n  'big-square': 'b',\n  small: 't',\n  medium: 'm',\n  large: 'l',\n  huge: 'h',\n};\n\nconst parseImgur = (rawImage: string, size: keyof typeof mapping = 'large') => {\n  if (!rawImage) {\n    return `https://i.imgur.com/${defaultPicture}`;\n  }\n\n  // Don't resize the png image\n  // as there is a transparent bug in imgur\n  if (rawImage.match('(png)|(gif)')) {\n    // Prevent double http url\n    if (rawImage.match('http')) {\n      return rawImage;\n    }\n    return `https://i.imgur.com/${rawImage}`;\n  }\n\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\n  // Prevent double http url\n  if (resizedImage.match('http')) {\n    return resizedImage;\n  }\n  return `https://i.imgur.com/${resizedImage}`;\n};\n\nconst parseTitle = (title: string, text: string) => `title=\"${title || text}\"`;\n\nconst parseImageTag = ({ href, title, text }: {href: string, title: string, text: string}) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\n  href,\n  'large',\n)} ${parseTitle(title, text)} />`;\n\nconst getGalleryImage = ({ href, title, text }: {href: string, title: string, text: string}) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\n  href,\n  'huge',\n)}\">${parseImageTag({ href, title, text })}</a>`;\n\nexport {\n  parseImgur,\n  parseImageTag,\n  getGalleryImage,\n};\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Card from '../components/Card';\nimport SEO from '../components/SEO';\nimport Sidebar from '../components/Sidebar';\n\nconst TagPage = ({ data, pageContext }) => {\n  const { edges } = data.allMarkdownRemark;\n  const { tag } = pageContext;\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\n          <div\n            className=\"col-12\"\n            style={{\n              fontSize: 20,\n              margin: 15,\n            }}\n          >\n            {edges.length}\n            &nbsp;Articles in&nbsp;\n            {tag}\n          </div>\n          {edges.map(({ node }) => (\n            <Card {...node.frontmatter} key={node.id} />\n          ))}\n        </div>\n\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n\n      <SEO\n        title={tag}\n        url={`/tag/${tag}`}\n        siteTitleAlt=\"Calpa's Blog\"\n        isPost={false}\n        description={tag}\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query tagQuery($tag: [String!]) {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            url: slug\n            title\n            date\n            tags\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["CardHeader","_ref","url","image","backgroundColor","React","Link","to","className","style","headerImage","color","backgroundImage","parseImgur","_ref2","title","date","headerBackgroundColor","description","tags","split","map","name","Tag","key","config","siteTitleAlt","isPost","Helmet","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","friends","friend","ExternalLink","href","rel","posts","node","toUrl","frontmatter","_node$frontmatter","slug","fields","totalCount","LatestPost","Friend","github","email","iconUrl","about","Icon","icon","target","FontAwesomeIcon","Sidebar","latestPosts","src","alt","Information","StaticQuery","query","render","data","all","limited","count","mapping","small","medium","large","huge","rawImage","size","match","resizedImage","replace","pageContext","edges","allMarkdownRemark","tag","margin","fontSize","length","id"],"sourceRoot":""}