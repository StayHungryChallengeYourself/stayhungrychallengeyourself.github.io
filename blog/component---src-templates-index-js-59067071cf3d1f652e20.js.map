{"version":3,"file":"component---src-templates-index-js-59067071cf3d1f652e20.js","mappings":"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","sources":["webpack://my-thoughts/./src/components/Card/index.tsx","webpack://my-thoughts/./src/components/ShareBox/index.tsx","webpack://my-thoughts/./src/components/Sidebar/Friend/index.tsx","webpack://my-thoughts/./src/components/Sidebar/LatestPost/index.tsx","webpack://my-thoughts/./src/components/Sidebar/Information/index.tsx","webpack://my-thoughts/./src/components/Sidebar/index.tsx","webpack://my-thoughts/./src/components/Tag/index.tsx","webpack://my-thoughts/./src/utils/image.ts","webpack://my-thoughts/./src/templates/index.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nimport { parseImgur } from '../../utils/image';\n\nimport './index.scss';\n\nconst imageStyle = (headerImage: string, color: string) => ({\n  backgroundColor: `#${color}`,\n  backgroundImage: ` url(${parseImgur(headerImage, 'large')})`,\n});\n\ntype CardPropTypes = {\n  title: string,\n  date: string,\n  url: string,\n  headerImage: string,\n  headerBackgroundColor: string,\n  description: string,\n  tags: string[],\n};\n\ntype CardHeaderPropTypes = {\n  image: string,\n  url: string,\n  backgroundColor: string,\n};\n\nconst CardHeader: React.FC<CardHeaderPropTypes> = ({ url, image, backgroundColor }) => (\n  <Link to={url}>\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\n  </Link>\n);\n\nconst Card: React.FC<CardPropTypes> = ({\n  title,\n  date = '',\n  url,\n  headerImage = '',\n  headerBackgroundColor = '',\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map(name => (\n              <Tag name={name} key={name} />\n            ))}\n          </div>\n          <Link to={url}>\n            <h4 className=\"title\">{title}</h4>\n          </Link>\n          <p>{description}</p>\n          <Link to={url}>\n            ....继续阅读全文\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\nexport default Card;\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './index.scss';\n\nconst CommentButton = () => (\n  <a\n    className=\"share-button\"\n    style={{\n      lineHeight: '1.7rem',\n      color: '#337ab7',\n      paddingLeft: '0.15rem',\n    }}\n    href=\"#gitalk-container\"\n    onClick={() => {}}\n  >\n    <FontAwesomeIcon icon={['far', 'comment']} />\n  </a>\n);\n\ntype PropTypes = {\n  url: string,\n  hasCommentBox: boolean\n};\n\nconst ShareBox: React.FC<PropTypes> = ({ url, hasCommentBox = true }) => (\n  <div className=\"m-share-box\">\n    <a\n      href={`https://www.facebook.com/sharer/sharer.php?u=${url}`}\n      title=\"\"\n      className=\"share-button\"\n      onClick={() => {}}\n    >\n      <FontAwesomeIcon icon={['fab', 'facebook-f']} />\n    </a>\n    \n    {hasCommentBox && <CommentButton />}\n\n    <a\n      className=\"share-button\"\n      href=\"#header\"\n      onClick={() => {\n      }}\n      style={{\n        lineHeight: '1.7rem',\n        paddingLeft: '0.1rem',\n      }}\n    >\n      <FontAwesomeIcon icon={['fas', 'chevron-up']} />\n    </a>\n  </div>\n);\n\nexport default ShareBox;\n","import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport config from '../../../../configs';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"friend\">\n    <p>友情链接</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend?.href}\n        title={friend?.title}\n        key={friend?.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './index.scss';\n\ntype PropTypes = {\n  posts: Record<any, any>[],\n};\nconst LatestPost = ({ posts = [] }) => {\n  console.dir(posts)\n  return (\n    <div className=\"latest-post\">\n      <p>最新文章</p>\n      {posts.map(({ node }) => (\n        <Link\n          to={node?.frontmatter?.url || node.frontmatter.slug || node.fields.slug}\n          key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        >\n          {node.frontmatter.title}\n        </Link>\n      ))}\n    </div>\n  )\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\ntype PropTypes = {\n  totalCount: number\n  posts: [],\n};\n\n// eslint-disable-next-line react/prop-types\nconst Information: React.FC<PropTypes> = ({ totalCount, posts = []}) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      共&nbsp;\n      {totalCount}\n      &nbsp;篇文章\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Friend />\n  </div>\n);\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\nimport config from '../../../configs';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  github,\n  name,\n  email,\n  iconUrl,\n  about,\n} = config;\n\ntype IconPropTypes = {\n  href: string,\n  icon: IconProp,\n};\n\ntype SidebarPropTypes = {\n  totalCount: number,\n  latestPosts: [],\n};\n\nconst Icon: React.FC<IconPropTypes> = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar : React.FC<SidebarPropTypes> = ({ totalCount = 0, latestPosts = [] }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"Calpa\" />\n        <h4>{name}</h4>\n      </Link>\n      <Icon\n        href={github.url}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { frontmatter: { date: DESC } }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\n\ntype PropTypes = {\n  name: string,\n  count?: string | number,\n};\nconst Tag: React.FC<PropTypes> = ({ name, count='' }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nexport default Tag;\n","// s = Small Square (90×90)\n// b = Big Square (160×160)\n// t = Small Thumbnail (160×160)\n// m = Medium Thumbnail (320×320)\n// l = Large Thumbnail (640×640)\n// h = Huge Thumbnail (1024×1024)\nconst defaultPicture = 'M795H8A.jpg';\n\nconst mapping = {\n  'small-square': 's',\n  'big-square': 'b',\n  small: 't',\n  medium: 'm',\n  large: 'l',\n  huge: 'h',\n};\n\nconst parseImgur = (rawImage: string, size: keyof typeof mapping = 'large') => {\n  if (!rawImage) {\n    return `https://i.imgur.com/${defaultPicture}`;\n  }\n\n  // Don't resize the png image\n  // as there is a transparent bug in imgur\n  if (rawImage.match('(png)|(gif)')) {\n    // Prevent double http url\n    if (rawImage.match('http')) {\n      return rawImage;\n    }\n    return `https://i.imgur.com/${rawImage}`;\n  }\n\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\n  // Prevent double http url\n  if (resizedImage.match('http')) {\n    return resizedImage;\n  }\n  return `https://i.imgur.com/${resizedImage}`;\n};\n\nconst parseTitle = (title: string, text: string) => `title=\"${title || text}\"`;\n\nconst parseImageTag = ({ href, title, text }: {href: string, title: string, text: string}) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\n  href,\n  'large',\n)} ${parseTitle(title, text)} />`;\n\nconst getGalleryImage = ({ href, title, text }: {href: string, title: string, text: string}) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\n  href,\n  'huge',\n)}\">${parseImageTag({ href, title, text })}</a>`;\n\nexport {\n  parseImgur,\n  parseImageTag,\n  getGalleryImage,\n};\n","/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport { Link } from 'gatsby-link';\n\nimport Card from '../components/Card';\nimport Sidebar from '../components/Sidebar';\nimport ShareBox from '../components/ShareBox';\n\nimport './index.scss';\n\nconst NavLinkText = ({ color, text }) => (\n  <div\n    className=\"navlink\"\n    style={{\n      color,\n    }}\n  >\n    {text}\n  </div>\n);\n\nconst NavLink = ({ test, url, text }) => {\n  if (!test) {\n    return <NavLinkText color=\"#7d7d7d\" text={text} />;\n  }\n\n  return (\n    <Link to={`${url}`}>\n      <NavLinkText color=\"#66ccff\" text={text} />\n    </Link>\n  );\n};\n\nconst Page = ({ pageContext, location }) => {\n  const {\n    group, index, first, last, pathPrefix,\n  } = pageContext;\n\n  const previousUrl = index - 1 === 1 ? '' : `/${pathPrefix}/${index - 1}`;\n  const nextUrl = `/${pathPrefix}/${index + 1}`;\n\n  return (\n    <React.Fragment>\n      <div\n        className=\"row homepage\"\n        style={{\n          marginTop: 20,\n        }}\n      >\n        <Sidebar />\n        <div className=\"col-xl-6 col-lg-7 col-md-12 col-xs-12 order-2\">\n          {group.map(({ node }) => (\n            <Card {...node.frontmatter} url={node.frontmatter.slug ? node.frontmatter.slug : node.fields.slug} key={node.fields.slug} />\n          ))}\n\n          <div\n            className=\"row\"\n            style={{\n              justifyContent: 'space-around',\n              marginBottom: '20px',\n            }}\n          >\n            <div className=\"previousLink\">\n              <NavLink test={!first} url={previousUrl} text=\"Previous\" />\n            </div>\n            <div className=\"nextLink\">\n              <NavLink test={!last} url={nextUrl} text=\"Next\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n      <ShareBox url={location.href} hasCommentBox={false} />\n    </React.Fragment>\n  );\n};\n\nexport default Page;\n"],"names":["CardHeader","_ref","url","image","backgroundColor","React","Link","to","className","style","headerImage","color","backgroundImage","parseImgur","_ref2","title","date","headerBackgroundColor","description","tags","split","map","name","Tag","key","CommentButton","lineHeight","paddingLeft","href","onClick","FontAwesomeIcon","icon","hasCommentBox","friends","config","friend","ExternalLink","rel","posts","console","dir","node","frontmatter","_node$frontmatter","slug","fields","totalCount","LatestPost","Friend","github","email","iconUrl","about","Icon","target","Sidebar","latestPosts","src","alt","Information","StaticQuery","query","render","data","all","limited","count","mapping","small","medium","large","huge","rawImage","size","match","resizedImage","replace","NavLinkText","text","NavLink","test","pageContext","location","group","index","first","last","pathPrefix","previousUrl","nextUrl","marginTop","justifyContent","marginBottom"],"sourceRoot":""}