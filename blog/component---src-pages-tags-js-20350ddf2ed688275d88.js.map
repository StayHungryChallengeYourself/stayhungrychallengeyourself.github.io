{"version":3,"file":"component---src-pages-tags-js-20350ddf2ed688275d88.js","mappings":"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","sources":["webpack://my-thoughts/./src/components/SEO/index.tsx","webpack://my-thoughts/./src/components/Sidebar/Friend/index.tsx","webpack://my-thoughts/./src/components/Sidebar/LatestPost/index.tsx","webpack://my-thoughts/./src/components/Sidebar/Information/index.tsx","webpack://my-thoughts/./src/components/Sidebar/index.tsx","webpack://my-thoughts/./src/components/Tag/index.tsx","webpack://my-thoughts/./src/pages/tags.js"],"sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport config from '../../../configs';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}: PropTypes) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\ntype PropTypes = {\n  url: string,\n  title: string,\n  description: string,\n  image: string,\n  siteTitleAlt: string,\n  isPost: string,\n};\n\nconst SEO: React.FC<PropTypes> = ({\n  url, title = config.title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD({url, title, siteTitleAlt, isPost, image, description}))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n  </Helmet>\n)\n\nexport default SEO;\n","import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport config from '../../../../configs';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"friend\">\n    <p>友情链接</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend?.href}\n        title={friend?.title}\n        key={friend?.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './index.scss';\n\ntype PropTypes = {\n  posts: Record<any, any>[],\n};\nconst LatestPost = ({ posts = [] }) => {\n  console.dir(posts)\n  return (\n    <div className=\"latest-post\">\n      <p>最新文章</p>\n      {posts.map(({ node }) => (\n        <Link\n          to={node?.frontmatter?.url || node.frontmatter.slug || node.fields.slug}\n          key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        >\n          {node.frontmatter.title}\n        </Link>\n      ))}\n    </div>\n  )\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\ntype PropTypes = {\n  totalCount: number\n  posts: [],\n};\n\n// eslint-disable-next-line react/prop-types\nconst Information: React.FC<PropTypes> = ({ totalCount, posts = []}) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      共&nbsp;\n      {totalCount}\n      &nbsp;篇文章\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Friend />\n  </div>\n);\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\nimport config from '../../../configs';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  github,\n  name,\n  email,\n  iconUrl,\n  about,\n} = config;\n\ntype IconPropTypes = {\n  href: string,\n  icon: IconProp,\n};\n\ntype SidebarPropTypes = {\n  totalCount: number,\n  latestPosts: [],\n};\n\nconst Icon: React.FC<IconPropTypes> = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar : React.FC<SidebarPropTypes> = ({ totalCount = 0, latestPosts = [] }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"Calpa\" />\n        <h4>{name}</h4>\n      </Link>\n      <Icon\n        href={github.url}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { frontmatter: { date: DESC } }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\n\ntype PropTypes = {\n  name: string,\n  count?: string | number,\n};\nconst Tag: React.FC<PropTypes> = ({ name, count='' }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nexport default Tag;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Sidebar from '../components/Sidebar';\nimport Tag from '../components/Tag';\nimport SEO from '../components/SEO';\nimport config from '../../configs'\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data }) => {\n  const { allMarkdownRemark } = data;\n\n  const mapping = {};\n\n  allMarkdownRemark.edges.forEach(({ node }) => {\n    const { tags } = node.frontmatter;\n    tags.forEach((name) => {\n      if (mapping[name]) {\n        mapping[name] += 1;\n      } else {\n        mapping[name] = 1;\n      }\n    });\n  });\n\n  const tags = Array.from(Object.keys(mapping)).sort(\n    (b, a) => mapping[a] - mapping[b],\n  );\n\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col order-2\">\n          {tags.map(item => (\n            <Tag name={item} key={item} count={mapping[item]} />\n          ))}\n        </div>\n      </div>\n      <SEO\n        title=\"标签\"\n        url=\"/tags/\"\n        siteTitleAlt={ config.title }\n        isPost={false}\n        description=\"Tags Page\"\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query getAllTags {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref2","url","title","config","description","image","siteTitleAlt","isPost","React","Helmet","name","content","type","JSON","stringify","_ref","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","friends","className","map","friend","ExternalLink","href","key","rel","posts","console","dir","node","Link","to","frontmatter","_node$frontmatter","slug","fields","totalCount","LatestPost","Friend","github","email","iconUrl","about","Icon","icon","target","FontAwesomeIcon","Sidebar","latestPosts","src","alt","Information","StaticQuery","query","render","data","all","limited","count","allMarkdownRemark","mapping","edges","forEach","tags","Array","from","Object","keys","sort","b","a","style","margin"],"sourceRoot":""}